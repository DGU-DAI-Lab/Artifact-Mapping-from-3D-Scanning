import cv2import numpy as npCONTOUR_THICKNESS = 1ARTIFACT_LIST = [    { 'name' : "고배",        'altname' : "a" },    { 'name' : "굽다리접시1", 'altname' : "b" },    { 'name' : "토기6",       'altname' : "c" }]def __main__():    # Depth-Based Segmentation    # Body/Window Seperation    samples = load_samples()    for artifact in samples:        oldway(artifact.raw, artifact.name)        spatial_contours = masking(artifact)        external_contours = getContours(artifact)        final = np.zeros(artifact.shape,dtype=np.uint8)        opacity = 1        for section in ["front", "back", "slice"]:            result = cv2.add(spatial_contours[section], external_contours[section])            #cv2.imwrite("../%s_%s_%s.jpg" % (artifact.name, section, "all-contours"), result)            final = cv2.addWeighted(final, 1, result, opacity, 0)            opacity *= .5        # PRINT NEGATIVE        for i in range(final.size):            final.itemset(i, (255-final.item(i)))        cv2.imwrite("../%s_%s.jpg" % (artifact.name, "all-contours"), final)    cv2.waitKey(0)def masking(artifact):    MASK_SIZE = 36    CANNY_THRESH_1 = 78    CANNY_THRESH_2 = 188    contoureds = {}    for section, face in artifact.faces.items():        canvas = np.zeros(face.gray_image.shape, np.uint8)        for i in range(len(face.bin_image['window'])):            mask = face.bin_image['window'][i]            target = face.apply_mask(face.gray_image,mask, MASK_SIZE+1)            # PRINT            #cv2.imwrite("../%s_%s_%s_%d.jpg" % (artifact.name, section, "window-mask", i), mask)            #cv2.imwrite("../%s_%s_%s_%d.jpg" % (artifact.name, section, "window-masked", i), target)            target = cv2.Canny(target, CANNY_THRESH_1, CANNY_THRESH_2, apertureSize=3)            target = face.apply_mask(target,mask, MASK_SIZE)            #cv2.imwrite("../%s_%s_%s_%d.jpg" % (artifact.name, section, "window-contour", i), target)            canvas = cv2.add(canvas,target)        contoureds[section] = canvas        #cv2.imwrite("../%s_%s_%s.jpg" % (artifact.name, section, "window-contour-all"), canvas)    return contouredsdef getContours(artifact):    global CONTOUR_THICKNESS    contoureds = {}    for section, face in artifact.faces.items():        canvas = np.zeros(face.gray_image.shape, np.uint8)        cv2.drawContours(canvas, face.contours, -1, 255, CONTOUR_THICKNESS)        #cv2.imwrite("../%s_%s_%s.jpg" % (artifact.name, section, "body-contour"), canvas)        contoureds[section] = canvas    return contouredsdef load_samples():    samples = []    for info in ARTIFACT_LIST:        artifact = Artifact()        artifact.name = info['altname']        artifact.load("../test_data/%s.png" % info['name']) # TO CHANGE        samples.append(artifact)    return samplesdef readUnicodePath(path):    stream = open(path,"rb")    bytes = bytearray(stream.read())    numpyArray = np.asarray(bytes,dtype=np.uint8)    img_bgr = cv2.imdecode(numpyArray, cv2.IMREAD_UNCHANGED)    return img_bgrprinted_images = 0def imshow(image):    global printed_images    cv2.imshow("%d" % printed_images, image)    printed_images += 1def oldway(img, fname):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    # Smoothing
    GAUSS_KERNEL_SIZE = 3
    GAUSS_SIGMA = 25
    # 1. 전처리 - 노이즈제거 (Blurring) : 가우시안 필터 적용
    blurred = cv2.GaussianBlur(gray, (GAUSS_KERNEL_SIZE,GAUSS_KERNEL_SIZE), GAUSS_SIGMA)
    # 2-A1 - opt1. 임계처리
    THRESH = 240
    ret, threshed = cv2.threshold(blurred.copy(), THRESH, 255, cv2.THRESH_BINARY_INV)
    # 2-A2. 후처리 - 점 노이즈제거 (Blurring) : Morphology - Opening
    morphed = cv2.morphologyEx(threshed, cv2.MORPH_CLOSE, (5,5), iterations=4)
    # 2-A3
    contours, hierarchy = cv2.findContours(morphed, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

    for length in range(1,2):
        canvas = np.zeros(gray.shape, np.uint8)
        cv2.drawContours(canvas, contours, -1, 255, length)
                # PRINT NEGATIVE        for i in range(canvas.size):            canvas.itemset(i, (255-canvas.item(i)))

        cv2.imwrite("../%s_oldway_thresh%d.jpg"%(fname,length), canvas)

    # 2-B1 - opt2. Edge 검출
    edge = cv2.Canny(blurred, 50, 150, apertureSize=3)
    # 2-B2
    contours, hierarchy = cv2.findContours(edge, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
    for length in range(1,2):
        canvas = np.zeros(gray.shape, np.uint8)
        cv2.drawContours(canvas, contours, -1, 255, length)
                # PRINT NEGATIVE        for i in range(canvas.size):            canvas.itemset(i, (255-canvas.item(i)))

        cv2.imwrite("../%s_oldway_edge%d.jpg"%(fname,length), canvas)class Artifacts_Face():    def __init__(self):        self.gray_image = None        self.bin_image = {            'default' : None,            'body'   : [], # Multi Layer Bin images            'window' : []        }        self.contours = None    def build_from(self, gray):        self.gray_image = gray        self.binarize()        self.findContour()    def binarize(self):        src = cv2.GaussianBlur(self.gray_image, (5,5), 25)        r, thresh = cv2.threshold(src, 250, 255, cv2.THRESH_BINARY_INV)        morphed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE,(5,5), iterations=3)        self.bin_image['default'] = morphed    def findContour(self):        contours, hierarchy = cv2.findContours(self.bin_image['default'], cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)        self.contours = contours        for i in range(len(contours)):            cont = contours[i]            hier = hierarchy[0,i]            canvas = np.zeros(self.gray_image.shape, np.uint8)            cv2.drawContours(canvas, [cont], 0, 255, -1) # Fill            isBody = hier[3] < 0            if isBody:                self.bin_image['body'].append(canvas)            else:                self.bin_image['window'].append(canvas)                    def apply_mask(self, src, mask, borderSize):        ksize = 2*borderSize + 1        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(ksize,ksize))        dilation = cv2.dilate(mask,kernel)        return cv2.bitwise_and(src, src, mask=dilation)class Artifact():    def __init__(self):        self.raw = None        self.shape = None        self.name = ""                self.faces = {            'front' : Artifacts_Face(),            'slice' : Artifacts_Face(),            'back'  : Artifacts_Face(),        }    def load(self, path):        self.raw = readUnicodePath(path)        self.shape = self.raw.shape        # TODO - Add "Auto Depth-Based-Segmentation" feature        path = path[:-4]        pack = [readUnicodePath(path+t) for t in ["-외.png","-단.png","-내.png"]]        pack = [cv2.cvtColor(t, cv2.COLOR_BGR2GRAY) for t in pack]        front, slice, back = pack        self.shape = front.shape #REMOVE        self.faces['front'].build_from(front)        self.faces['slice'].build_from(slice)        self.faces['back'].build_from(back)        __main__()exit()